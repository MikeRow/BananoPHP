<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace MikeRow\NanoPHP\NanoAPI;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class Envelope extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Envelope
     */
    public static function getRootAsEnvelope(ByteBuffer $bb)
    {
        $obj = new Envelope();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Envelope
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return ulong
     */
    public function getTime()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getUlong($o + $this->bb_pos) : 0;
    }

    public function getCredentials()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getCorrelationId()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return byte
     */
    public function getMessageType()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : \nanoapi\Message::NONE;
    }

    /**
     * @returnint
     */
    public function getMessage($obj)
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__union($obj, $o) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startEnvelope(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Envelope
     */
    public static function createEnvelope(FlatBufferBuilder $builder, $time, $credentials, $correlation_id, $message_type, $message)
    {
        $builder->startObject(5);
        self::addTime($builder, $time);
        self::addCredentials($builder, $credentials);
        self::addCorrelationId($builder, $correlation_id);
        self::addMessageType($builder, $message_type);
        self::addMessage($builder, $message);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param ulong
     * @return void
     */
    public static function addTime(FlatBufferBuilder $builder, $time)
    {
        $builder->addUlongX(0, $time, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCredentials(FlatBufferBuilder $builder, $credentials)
    {
        $builder->addOffsetX(1, $credentials, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCorrelationId(FlatBufferBuilder $builder, $correlationId)
    {
        $builder->addOffsetX(2, $correlationId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addMessageType(FlatBufferBuilder $builder, $messageType)
    {
        $builder->addByteX(3, $messageType, 0);
    }

    public static function addMessage(FlatBufferBuilder $builder, $offset)
    {
        $builder->addOffsetX(4, $offset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endEnvelope(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishEnvelopeBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset);
    }
}
